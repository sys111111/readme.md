//通过构建不同的立方体单位排列，构造出丰富的立体几何形态，同时，经过键盘 “a” 的点击交互，给予3D造型不同的形态变化，用简洁的单位型构造出立体的整体

let octree;
let cubes = [];
let w_ = 800;
let h_ = 800;
const fr = 15;
let colors;
let mm_0 = ['#FFD400', '#ff9900', '#ff0000', '#cccccc']; 
let mm_1 = ['#FFD400', '#ff9900', '#ff0000'];  
let mm_2 = ['#0066ff', '#FFD400', '#ff9900', '#4db8ff'];  
let mm_3 = ['#0066ff', '#FFD400', '#ff9900', '#009999'];  
let mm_4 = ['#0066ff', '#FFD400', '#ff9900', '#009999', '#ff0000'];  
let mm_5 = ['#FFD400', '#ff9900', '#4db8ff']; 
let mm_num;

document.oncontextmenu = () => false;
let easycam; 		
let camState = {
			distance: 2000,
			center  : [w_/2, w_/2, w_/2],
			rotation: [0.36, 0.15, 0.38, -0.90]
		} 

function getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

function setup() {
  createCanvas(w_, h_, WEBGL);
	easycam = createEasyCam();
  easycam.setState(camState, 4000); 
	frameRate(fr);
	mm_num =getRandomInt(0,6);
	switch(mm_num) {
		case 0:
			colors = mm_0;
			break;
		case 1:
			colors = mm_1;
			break;
		case 2:
			colors = mm_2;
			break;
		case 3:
			colors = mm_3;
			break;
		case 4:
			colors = mm_4;
			break;
		case 5:
			colors = mm_5;
			break;
		case 6:
			colors = mm_2;
			break;
		default:
			colors = mm_2;
	}
	
	let boundary = new Box(w_/2, w_/2, w_/2, w_/2, w_/2, w_/2);
  octree = new Octree(boundary, 20);  
  
  for (let i = 0; i < 25000; i++) {
    let x = random(-w_, w_);
    let y = random(-w_, w_);
    let z = random(-w_, w_);
    let point_ = new Point(x, y, z);
    octree.insert(point_);
  }
	octree.show();
	}

function draw() {
  background("#f5f5ef");
	for (var i = 0; i < cubes.length; i++) {
		stroke(cubes[i].color);
		fill('000000');
		strokeWeight(10);
		angleMode(DEGREES);

		switch(mm_num) {
			case 0:
				if(cubes[i].visable>=5) {
					push();
						translate(cubes[i].x, cubes[i].y, cubes[i].z);
						rotateX(cubes[i].sx);
						rotateY(cubes[i].sy);
						rotateZ(cubes[i].sz);
						box(60,60,60);
					pop();
				}
				break;
			case 1:
				if(cubes[i].visable>=20) {
					if((cubes[i].x == cubes[i].y - 100)||(cubes[i].x == cubes[i].y)||(cubes[i].x == cubes[i].y + 100)) {
						push();
							translate(cubes[i].x, cubes[i].y, cubes[i].z);
							rotateX(cubes[i].sx);
							rotateY(cubes[i].sy);
							rotateZ(cubes[i].sz);
							box(80,80,80);
						pop();
					}
				}
				break;
			case 2:
				if(cubes[i].visable>=18) {
					if(!((cubes[i].x>w_/2)&&(cubes[i].y>w_/2))) {
						push();
							translate(cubes[i].x, cubes[i].y, cubes[i].z);
							box(100,100,100);
						pop();
					}
				}
				break;
			case 3:
			case 4:
				if(cubes[i].visable>=27) {
						push();
							translate(cubes[i].x, cubes[i].y, cubes[i].z);
							box(100,100,100);
						pop();
				}
				break;
			case 5:
				if(cubes[i].visable>=20) {
					if((cubes[i].x == cubes[i].y - 100)||(cubes[i].x == cubes[i].y)||(cubes[i].x == cubes[i].y + 100)) {
						push();
							translate(cubes[i].y, cubes[i].x, cubes[i].z);
							box(100,100,100);
						pop();
					}
				}
				break;
			case 6:
				if(cubes[i].visable>=18) {
					if( (!( ((cubes[i].x>w_/2)&&(cubes[i].y>w_/2)) || ((cubes[i].x<w_/5)&&(cubes[i].y<w_/5)) ) ) ) {
						push();
							translate(cubes[i].x, cubes[i].y, cubes[i].z);
							box(100,100,100);
						pop();
					}
				}
				break;
			default:
				if(cubes[i].visable>=18) {
					if(!((cubes[i].x>w_/2)&&(cubes[i].y>w_/2))) {
						push();
							translate(cubes[i].x, cubes[i].y, cubes[i].z);
							box(100,100,100);
						pop();
					}
				}
		}		
	}
}

function keyPressed(){
if(keyCode == "a"){
	mm_num =getRandomInt(0,6);
 }
}

class Point {
  constructor(x, y, z) {
    this.x = x;
    this.y = y;
    this.z = z;
  }
  
  show() {
		push();
			point(this.x, this.y, this.z);
		pop();
  }
}

class Box {
  constructor(x, y, z, w, h, d) {
    this.x = x;
    this.y = y;
    this.z = z;
    this.w = w;
    this.h = h;
    this.d = d;
  }
  
  contains(point) {
    return (point.x >= this.x - this.w &&
            point.x <= this.x + this.w &&
            point.y >= this.y - this.h &&
            point.y <= this.y + this.h &&
            point.z >= this.z - this.d &&
            point.z <= this.z + this.d);
  }
  
  intersects(range) {
    return !(range.x - range.w > this.x + this.w ||
             range.x + range.w < this.x - this.w ||
             range.y - range.h > this.y + this.h ||
             range.y + range.h < this.y - this.h ||
             range.z - range.d > this.z + this.d ||
             range.z + range.d < this.z - this.d);
  }
}

class Octree {
  constructor(boundary, capacity) {
    this.boundary = boundary;
    this.capacity = capacity;
    this.points = [];
    this.children = [];
  }
  
  subdivide() {
    let x = this.boundary.x;
    let y = this.boundary.y;
    let z = this.boundary.z;
    let w = this.boundary.w/2;
    let h = this.boundary.h/2;
    let d = this.boundary.d/2;
    
    this.children[0] = new Octree(new Box(x + w, y - h, z - d, w, h, d), this.capacity);
    this.children[1] = new Octree(new Box(x - w, y - h, z - d, w, h, d), this.capacity);
    this.children[2] = new Octree(new Box(x + w, y + h, z - d, w, h, d), this.capacity);
    this.children[3] = new Octree(new Box(x - w, y + h, z - d, w, h, d), this.capacity);
    this.children[4] = new Octree(new Box(x + w, y - h, z + d, w, h, d), this.capacity);
    this.children[5] = new Octree(new Box(x - w, y - h, z + d, w, h, d), this.capacity);
    this.children[6] = new Octree(new Box(x + w, y + h, z + d, w, h, d), this.capacity);
    this.children[7] = new Octree(new Box(x - w, y + h, z + d, w, h, d), this.capacity);
  }
  
  insert(point) {
    if (!this.boundary.contains(point)) {
      return;
    }
    if (this.points.length < this.capacity) {
      this.points.push(point);
    } else {
      if (this.children.length === 0) {
        this.subdivide();
      }
      for (let child of this.children) {
        child.insert(point);
      }
    }
  }
  
  query(range) {
    if (!this.boundary.intersects(range)) {
      return [];
    }
    let found = [];
    for (let p of this.points) {
      if (range.contains(p)) {
        found.push(p);
      }
    }
    if (this.children.length > 0) {
      for (let child of this.children) {
        found = found.concat(child.query(range));
      }
    }
    return found;
  }
	
	show() {
		if(this.children.length > 0) {
			for(let child of this.children) {
				child.show();
			}
		} else {
					let c;
					let {x, y, z, w, h, d} = this.boundary;
			
				if(mm_num == 0) {
					if(((x>w_/2)&&(y>w_/2))) {
						c = random([colors[0],colors[3]]);
					} else if(((x<w_/2)&&(y<w_/2))) {
						c = random([colors[0],colors[1]]);
					} else {
						c = random([colors[0],colors[1],colors[2]]);
					}
				} else if(mm_num == 3) {
						if(x>2*w_/3){
							c = colors[3];
						} else if((x>w_/3)&&(x<=2*w_/3)){
							c = colors[0];
						} else if(x<=w_/3){
							c = random([colors[1],colors[2]]);
						}
					} else if(mm_num == 4) {  
						if(x>2*w_/3){
							c = random([colors[0],colors[3],colors[4]]);
						} else if((x>w_/3)&&(x<=2*w_/3)){
							c = random([colors[0],colors[2],colors[3]]);
						} else if(x<=w_/3){
							c = random([colors[0],colors[1],colors[2]]);
						}
					} else {
						c = random(colors);
					}
					
					let v = getRandomInt(0,100);
					let sx = random(45);
					let sy = random(45);
					let sz = random(45);
					let cube = {
						"x": x,
						"y": y,
						"z": z,
						"w": w,
						"h": h,
						"d": d,
						"color": c,
						"visable": v,
						"sx": sx,
						"sy": sy,
						"sz": sz
					};
					cubes.push(cube);
		}
	}
}















































































































































