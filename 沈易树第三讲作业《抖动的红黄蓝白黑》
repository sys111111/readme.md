const dots = [
  [0,0],[3,0],[5,0],[7,0],[8,0],[0,1],[1,1],[3,1],[5,1],[7,1],
  [8,1],[0,3],[1,3],[5,3],[6,3],[7,3],[1,5],[3,5],[5,5],[6,5],
  [7,5],[0,6],[1,6],[3,6],[5,6],[7,6],[8,6],[1,7],[3,7],[5,7],
  [0,8],[1,8],[3,8],[5,8],[7,8],[8,8]
];

const rows = [
  [0, 1, 2, 3, 4],
  [5, 6, 7, 8, 9, 10],
  [11, 12],
  [13, 14, 15],
  [16, 17, 18, 19, 20],
  [21, 22],
  [23, 24, 25, 26],
  [27, 28, 29],
  [30, 31, 32, 33, 34, 35]
];

const columns = [
  [0, 5, 11, 21, 30],
  [6, 12, 16, 22, 27, 31],
  [1, 7],
  [17, 23, 28, 32],
  [2, 8, 13, 18, 24, 29, 33],
  [14, 19],
  [3, 9, 15, 20, 25, 34],
  [4, 10, 26, 35]
];

const rects = [
  [0, 1, 7, 6, 5],
  [1, 2, 8, 7],
  [2, 3, 9, 8],
  [3, 4, 10, 9],
  [5, 6, 12, 11], 
  [6, 7, 8, 13, 18, 17, 16, 12],
  [8, 9, 15, 14, 13], 
  [9, 10, 26, 25, 20, 15],
  [11, 12, 16, 22, 21],
  [13, 14, 19, 18], 
  [14, 15, 20, 19],
  [16, 17, 23, 28, 27, 22],
  [17, 18, 24, 23],
  [18, 19, 20, 25, 24],
  [21, 22, 27, 31, 30],
  [23, 24, 29, 28],
  [24, 25, 34, 33, 29],
  [25, 26, 35, 34],
  [27, 28, 32, 31], 
  [28, 29, 33, 32]
];

const rectcolors = [
  '#ffffff','#ffffff','#faeb00','#ffffff','#ffffff',
  '#ff0000','#faeb00','#ffffff','#ffffff','#ffffff',
  '#ffffff','#000000','#ffffff','#ffffff','#faeb00',
  '#ffffff','#0040ff','#ff0000','#ffffff','#000000'
];


let br;

let particles = [];
let springAs = [];
let springBs = [];

function setup() {
  createCanvas(windowWidth, windowHeight);

  initialize();
}

function initialize() {

  if(width>height) {
    br = (height-200)/8;
  } else {
    br = (width-200)/8;
  }
  
  for(let i=0; i<dots.length; i++) {
    dots[i][0] = dots[i][0]*br + (width - (br*8))/2;
    dots[i][1] = dots[i][1]*br + (height - (br*8))/2;   
    particles.push(new Particle(dots[i][0], dots[i][1]));
    springAs.push(new SpringA(particles[i], particles[i].anchor));
  }
  
  for(let r of rows) {
    for(let i=0; i< r.length-1; i++) {
      springBs.push(new SpringB(particles[r[i]], particles[r[i+1]]));
    }
  }
  
  for(let c of columns) {
    for(let j=0; j< c.length-1; j++) {
      springBs.push(new SpringB(particles[c[j]], particles[c[j+1]]));
    }
  }

}

function draw() {
  background(255);

  for(let p of particles) {
    p.update();
  }
  for(let sA of springAs) {
    sA.update();
  }
  for(let sB of springBs) {
    sB.update();
  }

  for(let k=0; k<rects.length; k++) {
    let rect = rects[k];
    fill(rectcolors[k]);
    stroke(0);
    strokeJoin(ROUND);
    strokeWeight(width*0.005);
    beginShape();
    for(let l=0; l<rect.length; l++) {
      vertex(particles[rect[l]].position.x, particles[rect[l]].position.y);
    }
    endShape(CLOSE);
  }

  if(mouseIsPressed) {
    for(let p of particles) {
      let d = dist(p.position.x, p.position.y, mouseX, mouseY);
      if(d < width*0.05) {
        p.position.set(mouseX, mouseY);
        p.velocity.set(0, 0);
      }
    }
  }
}

class Particle {
  constructor(x, y) {
    this.acceleration = createVector(0, 0);
    this.velocity = createVector(0, 0);
    this.position = createVector(x, y);
    this.anchor = createVector(x, y);
    this.mass = 1;
    this.diameter = 10;
    this.damping = 0.95;
  }

  applyForce(force) {
    let f = force.copy();
    f.div(this.mass);
    this.acceleration.add(f);
  }

  update() {
    this.velocity.add(this.acceleration);
    this.position.add(this.velocity);
    this.acceleration.mult(0);
    this.velocity.mult(this.damping);
  }

  show() {
    fill(255,0,0);
    noStroke();
    ellipse(this.position.x, this.position.y, this.diameter, this.diameter);
  }
}

class SpringA {
  constructor(p, anchor) {
    this.k = 0.1;
    this.restlength = 0;
    this.particle = p;
    this.anchor = anchor;
  }

  update() {
    let force = p5.Vector.sub(this.particle.position, this.anchor);
    let x = force.mag() - this.restlength;
    force.normalize();
    force.mult(-1 * this.k * x);
    this.particle.applyForce(force);
  }

}

class SpringB {
  constructor(p, otherp) {
    this.k = 0.05;
    this.particle = p;
    this.otherparticle = otherp;
    this.restlength = p.position.dist(this.otherparticle.position);
  }

  update() {
    let force = p5.Vector.sub(this.particle.position, this.otherparticle.position);
    let x = force.mag() - this.restlength;
    force.normalize();
    force.mult(-1 * this.k * x);
    this.particle.applyForce(force);
    force.mult(-1);
    this.otherparticle.applyForce(force);
  }
}


