ArrayList particles = new ArrayList();
float box = 200;
import peasy.*;
PeasyCam cam;

void setup() {
  size(800, 800, P3D);
  smooth(80);
  noFill();
  strokeWeight(2);
  cam = new PeasyCam(this, 500);
}

void draw() {
  background(0);
  if ((frameCount % 2) == 0) {
    float x = random(-box, box);
    float z = random(-box, box);
    PVector acc = new PVector(random(-1, 1), random(-1, 1), random(-1, 1));
    for (int i = 0; i < 80; i++) {
      particles.add(new Particle(new PVector(x+random(2, 5), -box+random(2, 5), z+random(2, 5)), acc));
    }
  }
  translate(width/2, height/2);
  rotateX(radians(1+mouseX/5));
  rotateY(radians(1+mouseY/5));
  stroke(255);
  for (int i = 0; i < particles.size (); i++) {
    Particle p = (Particle) particles.get(i);
    p.move();
    p.applyForce(new PVector(0, 0.1, 0));
    float b = abs(sin(radians(p.loc.x+frameCount)))*sin(radians(p.loc.z+frameCount))*cos(radians(p.loc.y))*40;
    p.changeVel(b);
    p.boundary(b);
    if (p.life < 0) {
      particles.remove(p);
    }
  }
}

void keyPressed() {
  if (key == 's')
  saveFrame("####.png");
}


//particle
class Particle {
  PVector loc, vel, acc;
  float bounce = -0.3;
  int hits = 0;
  float life = random(200, 300);
  float maxLife = life;
  color particleColor;
  Particle(PVector loc, PVector acc) {
    this.loc = loc;
    vel = new PVector();
    this.acc = acc;
  }
  
  void move() {
    life--;
    stroke(0,200,255);
    strokeWeight(2.5);
    point(loc.x, loc.y, loc.z);
    vel.add(acc);
    loc.add(vel);
    acc.mult(0);
  }
  
  void changeVel(float b) {
    if (loc.y > box-b) hits++;
    if (loc.y > box-b && hits == 1) acc = new PVector(random(-1, 1), random(-1, 1), random(-1, 1));
  }
  
  void applyForce(PVector force) {
    acc.add(PVector.div(force, 1));
  }
  
  void boundary(float b) {
    if (loc.x < -box) {
      vel.x *= bounce;
      loc.x = -box;
    }
    if (loc.x > box) {
      vel.x *= bounce;
      loc.x = box;
    }
    if (loc.y < -box) {
      vel.y *= bounce;
      loc.y = -box;
    }
    if (loc.y > box-b) {
      vel.y *= bounce;
      loc.y = box-b;
    }
    if (loc.z < -box) {
      vel.z *= bounce;
      loc.z = -box;
    }
    if (loc.z > box) {
      vel.z *= bounce;
      loc.z = box;
    }
  }
}
